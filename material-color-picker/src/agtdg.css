// Variables
// -------------------------------------

$temp: 1px solid tomato;



// Functions
// -------------------------------------

@function tint($color, $percent) {
    @return mix(white, $color, $percent);
}

@function shade($color, $percent) {
    @return mix(black, $color, $percent);
}

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}

@function map-deep-set($map, $keys.../*, $value */) {
    $map-list: ($map,);
    $result: null;

    @if length($keys) == 2 {
        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }

    @for $i from 1 through length($keys) - 2 {
        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }

    @for $i from length($map-list) through 1 {
        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
    }

    @return $result;
}

@function map-has-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
    }

    @return true;
}

@function map-has-nested-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
        $map: map-get($map, $key);
    }

    @return true;
}

@function map-depth($map) {
    $level: 1;

    @each $key, $value in $map {
        @if type-of($value) == "map" {
            $level: max(map-depth($value) + 1, $level);
        }
    }

    @return $level;
}



// Mixins
// -------------------------------------

@mixin clearfix($pseudo: after) {
    &:#{$pseudo} {
        content: '';
        display: table;
        clear: both;
    }
}

@mixin list-reset {
    margin: 0;
    padding: 0;
    list-style: none;
}

@mixin visually-hidden {
    display: inline-block;
    clip-path: inset(50%);
    white-space: nowrap;
    overflow: hidden;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

@mixin mq($value, $property: min-width, $media: screen) {
    @media #{$media} and ($property: $value) {
        @content;
    }
}

@mixin debug-map($map) {
    @at-root {
        @debug-map {
            __toString__: inspect($map);
            __length__: length($map);
            __depth__: map-depth($map);
            __keys__: map-keys($map);
            __properties__ {
                @each $key, $value in $map {
                    #{'(' + type-of($value) + ') ' + $key}: inspect($value);
                }
            }
        }
    }
}



// General
// -------------------------------------

html {
    box-sizing: border-box;
    height: 100%;
}

*,
*:before,
*:after {
    box-sizing: inherit;

    @media (prefers-reduced-motion: reduce) {
        animation-duration: 0ms !important;
        transition-duration: 0ms !important;
    }
}

body {
    height: 100%;
}

img {
    max-width: 100%;
    height: auto;
}